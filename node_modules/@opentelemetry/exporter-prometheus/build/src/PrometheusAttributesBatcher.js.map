{"version":3,"file":"PrometheusAttributesBatcher.js","sourceRoot":"","sources":["../../src/PrometheusAttributesBatcher.ts"],"names":[],"mappings":";;;AA4BA,MAAa,2BAA2B;IAAxC;QACU,cAAS,GAAG,IAAI,GAAG,EAA6B,CAAC;IAmC3D,CAAC;IAjCC,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,OAAO,CAAC,MAAoB;QAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;QACpC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,GAAG;gBACL,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,IAAI;gBACtC,OAAO,EAAE,IAAI,GAAG,EAAE;aACnB,CAAC;YACF,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAChC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;QAC/B,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;aAC9C,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;aACxC,IAAI,CAAC,GAAG,CAAC,CAAC;QACb,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,aAAa;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAC5C,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;YAC1C,OAAO;gBACL,UAAU;gBACV,cAAc;gBACd,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;aACtC,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AApCD,kEAoCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MetricRecord,\n  MetricDescriptor,\n  AggregatorKind,\n} from '@opentelemetry/sdk-metrics-base';\nimport { PrometheusCheckpoint } from './types';\n\ninterface BatcherCheckpoint {\n  descriptor: MetricDescriptor;\n  aggregatorKind: AggregatorKind;\n  records: Map<string, MetricRecord>;\n}\n\nexport class PrometheusAttributesBatcher {\n  private _batchMap = new Map<string, BatcherCheckpoint>();\n\n  get hasMetric(): boolean {\n    return this._batchMap.size > 0;\n  }\n\n  process(record: MetricRecord): void {\n    const name = record.descriptor.name;\n    let item = this._batchMap.get(name);\n    if (item === undefined) {\n      item = {\n        descriptor: record.descriptor,\n        aggregatorKind: record.aggregator.kind,\n        records: new Map(),\n      };\n      this._batchMap.set(name, item);\n    }\n    const recordMap = item.records;\n    const attributes = Object.keys(record.attributes)\n      .map(k => `${k}=${record.attributes[k]}`)\n      .join(',');\n    recordMap.set(attributes, record);\n  }\n\n  checkPointSet(): PrometheusCheckpoint[] {\n    return Array.from(this._batchMap.values()).map(\n      ({ descriptor, aggregatorKind, records }) => {\n        return {\n          descriptor,\n          aggregatorKind,\n          records: Array.from(records.values()),\n        };\n      }\n    );\n  }\n}\n"]}